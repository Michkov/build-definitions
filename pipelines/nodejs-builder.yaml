## Sample Pipeline for a NodeJs s2i build provided ootb.
#
## If changed by a user, the App Studio HAS service should push the modified
## Pipeline definition into the user's repository.

## Sample usage by client
##
# apiVersion: tekton.dev/v1beta1
# kind: PipelineRun
# metadata:
#   name: new-pipeline-7vae74
#   namespace: default
# spec:
#   params:
#     - name: url
#       value: 'https://github.com/openshift/console'
#     - name: IMAGE
#       value: 'docker.io/sbose78/sample-nodejs:fooo'
#     - name: PATH_CONTEXT
#       value: frontend
#   pipelineRef:
#     name: new-pipeline
#   serviceAccountName: pipeline
#   timeout: 1h0m0s
#   workspaces:
#     - name: workspace
#       persistentVolumeClaim:
#         claimName: app-studio-default-workspace

apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: nodejs-builder
  labels:
    "pipelines.openshift.io/used-by" : "build-cloud"
    "pipelines.openshift.io/runtime" : "nodejs"
    "pipelines.openshift.io/strategy" : "s2i"
spec:
  params:
    - description: 'Source Repository URL'
      name: git-url
      type: string
    - description: 'Revision of the Source Repository'
      name: revision
      type: string
      default: main
    - description: 'Fully Qualified Output Image'
      name: output-image
      type: string
    - description: The path to your source code
      name: path-context
      type: string
      default: .
    - description: Path to the Dockerfile
      name: dockerfile
      type: string
      default: Dockerfile
    - description: Force rebuild image
      name: rebuild
      default: "false"
  tasks:
    - name: appstudio-init
      params:
        - name: image-url
          value: "$(params.output-image)"
        - name: rebuild
          value: "$(params.rebuild)"
      taskRef:
        name: init
    - name: git-clone
      when:
        - input: $(tasks.appstudio-init.results.build)
          operator: in
          values: ["true"]
      runAfter:
        - appstudio-init
      params:
        - name: url
          value: "$(params.git-url)"
        - name: revision
          value: "$(params.revision)"
      taskRef:
        name: git-clone
      workspaces:
        - name: output
          workspace: workspace
        - name: basic-auth
          workspace: git-auth
    - name: appstudio-configure-build
      when:
        - input: $(tasks.appstudio-init.results.build)
          operator: in
          values: ["true"]
      runAfter:
        - git-clone
      taskRef:
        name: configure-build
      workspaces:
        - name: source
          workspace: workspace
        - name: registry-auth
          workspace: registry-auth
    - name: s2i-nodejs
      when:
        - input: $(tasks.appstudio-init.results.build)
          operator: in
          values: ["true"]
      params:
        - name: PATH_CONTEXT
          value: "$(params.path-context)"
        - name: IMAGE
          value: "$(params.output-image)"
        - name: PUSH_EXTRA_ARGS
          value: "$(tasks.appstudio-configure-build.results.buildah-auth-param)"
      runAfter:
        - appstudio-configure-build
      taskRef:
        name: s2i-nodejs
      workspaces:
        - name: source
          workspace: workspace
  finally:
    - name: show-summary
      taskRef:
        name: summary
      params:
      - name: pipeline-run-name
        value: "$(context.pipelineRun.name)"
      - name: git-url
        value: "$(params.git-url)"
      - name: image-url
        value: $(params.output-image)
  workspaces:
    - name: workspace
    - name: registry-auth
      optional: true
    - name: git-auth
      optional: true
